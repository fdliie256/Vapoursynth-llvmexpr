name: build-linux-x64

on:
  push:
    branches: [ main ]
    tags: [ 'R*' ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Linux x64 (glibc, static LLVM)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vapoursynth and LLVM 20 via Homebrew
        run: |
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install vapoursynth
          brew install llvm@20
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install apt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            meson \
            ninja-build \
            pkg-config

      - name: Set environment variables
        run: |
          echo "CC=clang-20" >> $GITHUB_ENV
          echo "CXX=clang++-20" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix)/lib" >> $GITHUB_ENV

      - name: Show tool versions
        run: |
          $CC --version || true
          $CXX --version || true
          meson --version
          ninja --version
          llvm-config-20 --version
          pkg-config --version

      - name: Check LLVM version (>= 20)
        run: |
          set -e
          ver=$(llvm-config-20 --version | cut -d. -f1)
          if [ "$ver" -lt 20 ]; then
            echo "LLVM >= 20 is required, found: $(llvm-config-20 --version)" >&2
            exit 1
          fi

      - name: Configure (Meson)
        run: |
          meson setup builddir \
            -Dstatic-llvm=true \
            --buildtype=release \
            --native-file=<(echo "[binaries]\nllvm-config = 'llvm-config-20'")

      - name: Build
        run: |
          ninja -C builddir

      - name: Install to staging dir
        run: |
          DESTDIR="$PWD/stage" meson install -C builddir
          find stage -maxdepth 5 -type f -print

      - name: Collect artifact
        id: collect
        run: |
          set -e
          dll=$(find stage -type f -name 'libllvmexpr.so' | head -n 1)
          if [ -z "$dll" ]; then
            echo "libllvmexpr.so not found in install tree" >&2
            exit 1
          fi
          outdir=artifact
          mkdir -p "$outdir"
          cp "$dll" "$outdir/libllvmexpr.so"
          cp LICENSE "$outdir/" || true
          cp README.md "$outdir/" || true
          cp -r exprutils/ "$outdir/" || true
          cp pyproject.toml "$outdir/" || true
          echo "artifact_dir=$outdir" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvmexpr-linux-x64-static-llvm20
          path: ${{ steps.collect.outputs.artifact_dir }}
          if-no-files-found: error

      - name: Create zip for release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd "${{ steps.collect.outputs.artifact_dir }}"
          zip -9r ../llvmexpr-linux-x64-static-llvm20.zip .

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: llvmexpr-linux-x64-static-llvm20.zip
