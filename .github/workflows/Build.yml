name: Build
on:
  - push
  - release
  - pull_request
  - workflow_dispatch

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - arch: amd64
            runs-on: windows-latest
            platform: x64
          - arch: arm64
            runs-on: windows-11-arm
            platform: arm64
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install meson and ninja
        run: pip install meson ninja

      - name: Setup LLVM
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '20'

      - name: Install pkg-config and create fake VapourSynth file
        shell: bash
        run: |
          choco install pkgconfiglite -y
          mkdir -p ./pkgconfig
          VS_HEADER_PATH=$(pwd -W)/vapoursynth/include
          cat > ./pkgconfig/vapoursynth.pc << EOF
          prefix=/usr/local
          exec_prefix=${prefix}
          libdir=${exec_prefix}/lib
          includedir=${VS_HEADER_PATH}

          Name: VapourSynth
          Description: A video processing framework
          Version: 72.0
          Libs: -L${libdir}
          Cflags: -I${includedir}
          EOF
          echo "PKG_CONFIG_PATH=$(pwd -W)/pkgconfig" >> $GITHUB_ENV

      - name: Download VS headers
        shell: bash
        run: |
          git clone https://github.com/vapoursynth/vapoursynth --depth=1

      - name: Setup MS dev commands
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Meson setup
        shell: pwsh
        run: |
          meson setup build/ --wrap-mode=forcefallback -Dstatic-llvm=true

      - name: Meson compile
        shell: pwsh
        run: |
          meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-windows-${{ matrix.arch }}
          path: |
            build/*.dll

  build-linux:
    strategy:
      matrix:
        include:
          - arch: x86_64
            libc: glibc
            runs-on: ubuntu-latest
          - arch: aarch64
            libc: glibc
            runs-on: ubuntu-22.04-arm
          - arch: x86_64
            libc: musl
            runs-on: ubuntu-latest
          - arch: aarch64
            libc: musl
            runs-on: ubuntu-22.04-arm
    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Install base dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip git pkg-config curl xz-utils build-essential

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install meson and ninja
        run: pip install meson ninja

      - name: Setup for glibc build
        if: matrix.libc == 'glibc'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '20'

      - name: Setup for musl cross-build
        if: matrix.libc == 'musl'
        run: |
          set -e
          # Install Zig
          ZIG_VERSION="0.13.0"
          if [ "${{ matrix.arch }}" = "x86_64" ]; then ZIG_ARCH="x86_64"; else ZIG_ARCH="aarch64"; fi
          curl -L "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-${ZIG_ARCH}-${ZIG_VERSION}.tar.xz" | tar -xJ
          echo "$(pwd)/zig-linux-${ZIG_ARCH}-${ZIG_VERSION}" >> $GITHUB_PATH

          # Setup Zig compilers
          mkdir -p $HOME/.local/bin
          cat > $HOME/.local/bin/zig-cc << 'EOF'
          #!/bin/bash
          exec zig cc -target ${{ matrix.arch }}-linux-musl "$@"
          EOF
          chmod +x $HOME/.local/bin/zig-cc
          cat > $HOME/.local/bin/zig-cxx << 'EOF'
          #!/bin/bash
          exec zig c++ -target ${{ matrix.arch }}-linux-musl "$@"
          EOF
          chmod +x $HOME/.local/bin/zig-cxx
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "CC=zig-cc" >> $GITHUB_ENV
          echo "CXX=zig-cxx" >> $GITHUB_ENV

          # Download and extract musl LLVM from Alpine
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            LLVM_STATIC_URL="http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/llvm20-static-20.0.0_rc1-r0.apk"
            LLVM_DEV_URL="http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/llvm20-dev-20.0.0_rc1-r0.apk"
          else
            LLVM_STATIC_URL="http://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/llvm20-static-20.0.0_rc1-r0.apk"
            LLVM_DEV_URL="http://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/llvm20-dev-20.0.0_rc1-r0.apk"
          fi
          mkdir -p llvm-musl
          curl -L "$LLVM_STATIC_URL" | tar -C llvm-musl -xz
          curl -L "$LLVM_DEV_URL" | tar -C llvm-musl -xz

          # Create wrapper for llvm-config to fix paths
          LLVM_CONFIG_REAL="$(pwd)/llvm-musl/usr/bin/llvm-config-20"
          LLVM_CONFIG_WRAPPER="$HOME/.local/bin/llvm-config"
          cat > "$LLVM_CONFIG_WRAPPER" << EOF
          #!/bin/bash
          "$LLVM_CONFIG_REAL" "$@" | sed "s|/usr|$(pwd)/llvm-musl/usr|g"
          EOF
          chmod +x "$LLVM_CONFIG_WRAPPER"

      - name: Download VS headers
        run: git clone https://github.com/vapoursynth/vapoursynth --depth=1

      - name: Create fake VapourSynth pkg-config file
        run: |
          mkdir -p $HOME/pkgconfig
          VS_HEADER_PATH=$(pwd)/vapoursynth/include
          cat > $HOME/pkgconfig/vapoursynth.pc << EOF
          prefix=/usr/local
          exec_prefix=${prefix}
          libdir=${exec_prefix}/lib
          includedir=${VS_HEADER_PATH}

          Name: VapourSynth
          Description: A video processing framework
          Version: 72.0
          Libs: -L${libdir}
          Cflags: -I${includedir}
          EOF
          echo "PKG_CONFIG_PATH=$HOME/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Meson setup
        run: meson setup build/ --wrap-mode=forcefallback -Dstatic-llvm=true

      - name: Meson compile
        run: meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-${{ matrix.arch }}-${{ matrix.libc }}
          path: |
            build/*.so

  build-macos:
    strategy:
      matrix:
        include:
          - arch: x86_64
            runs-on: macos-13
          - arch: arm64
            runs-on: macos-latest
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install meson and ninja
        run: |
          pip install meson ninja

      - name: Setup LLVM
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: '20'

      - name: Download VS headers
        run: |
          git clone https://github.com/vapoursynth/vapoursynth --depth=1

      - name: Create fake VapourSynth pkg-config file
        run: |
          mkdir -p $HOME/pkgconfig
          VS_HEADER_PATH=$(pwd)/vapoursynth/include
          cat > $HOME/pkgconfig/vapoursynth.pc << EOF
          prefix=/usr/local
          exec_prefix=${prefix}
          libdir=${exec_prefix}/lib
          includedir=${VS_HEADER_PATH}

          Name: VapourSynth
          Description: A video processing framework
          Version: 72.0
          Libs: -L${libdir}
          Cflags: -I${includedir}
          EOF
          echo "PKG_CONFIG_PATH=$HOME/pkgconfig" >> $GITHUB_ENV

      - name: Meson setup
        run: meson setup build/ --wrap-mode=forcefallback -Dstatic-llvm=true

      - name: Meson compile
        run: |
          meson compile -C build/ -v

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-${{ matrix.arch }}
          path: |
            build/*.dylib
